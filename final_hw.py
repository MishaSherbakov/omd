import click
from random import randint
from typing import List


def log(template: str):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å –≤—Ä–µ–º–µ—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ñ-—Å—Ç—Ä–æ–∫—É

    """

    def function_time(func):
        """
        –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è—é—â–∞—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

        """

        def wrapper(*args, **kwargs):
            """
            –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±–µ—Ä—Ç–∫–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

            """
            # –í—ã–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏
            print(f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: {func.__name__}. '
                  f'–í—Ä–µ–º—è: {template.format(randint(30, 50))}')
            return func(*args, **kwargs)

        return wrapper

    return function_time


class Pizza:
    """
    –ö–ª–∞—Å—Å Pizza - —ç—Ç–æ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ü—Ü—ã.

    Attributes:
        size (str): –†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã ('L' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).
        ingredients (List[str]): –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ø–∏—Ü—Ü—ã.

    """

    def __init__(self, size: str = 'L'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞ Pizza.

        Args:
            size (str, optional): –†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã ('L' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).

        """
        self.size = size
        self.ingredients: List[str] = []

    def add_ingredient(self, ingredient: str):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –∫ –ø–∏—Ü—Ü–µ.

        Args:
            ingredient (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞.

        """
        self.ingredients.append(ingredient)

    @log('üóø–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ : {} –º–∏–Ω—É—Ç')
    def cook(self):
        """
        –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–∏—Ü—Ü—ã.

        """
        pass

    @log('üõµ–î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ : {} –º–∏–Ω—É—Ç')
    def deliver(self):
        """
        –î–æ—Å—Ç–∞–≤–∫–∞ –ø–∏—Ü—Ü—ã.

        """
        pass

    def show_ingredients(self) -> str:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –ø–∏—Ü—Ü—ã.

        Returns:
            str: –°—Ç—Ä–æ–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –º–µ–Ω—é –ø–∏—Ü—Ü—ã.

        """
        return f"{self.__class__.__name__} : {', '.join(self.ingredients)}"


class Margherita(Pizza):
    """
    –ö–ª–∞—Å—Å Margherita –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞".

    Attributes:
        size (str): –†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã ('L' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).

    """

    def __init__(self, size: str = 'L'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞ Margherita.

        Args:
            size (str, optional): –†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã ('L' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).

        """
        super().__init__(size)
        self.add_ingredient('tomato sauce')
        self.add_ingredient('mozzarella')
        self.add_ingredient('tomatoes')


class Pepperoni(Pizza):
    """
    –ö–ª–∞—Å—Å Pepperoni –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏".

    Attributes:
        size (str): –†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã ('L' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).

    """

    def __init__(self, size: str = 'L'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞ Pepperoni.

        Args:
            size (str, optional): –†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã ('L' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).

        """
        super().__init__(size)
        self.add_ingredient('tomato sauce')
        self.add_ingredient('mozzarella')
        self.add_ingredient('pepperoni')


class Hawaiian(Pizza):
    """
    –ö–ª–∞—Å—Å Hawaiian –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É "–ì–∞–≤–∞–π—Å–∫–∞—è".

    Attributes:
        size (str): –†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã ('L' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).

    """

    def __init__(self, size: str = 'L'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞ Hawaiian.

        Args:
            size (str, optional): –†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã ('L' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).

        """
        super().__init__(size)
        self.add_ingredient('tomato sauce')
        self.add_ingredient('mozzarella')
        self.add_ingredient('chicken')
        self.add_ingredient('pineapples')


@click.group()
def cli():
    """
    –ì—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –ø–∏—Ü—Ü—ã.

    """


@cli.command()
@click.option('--delivery', default=False, is_flag=True)
@click.option('--size', type=click.Choice(['L', 'XL']),
              default='L', help='–†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã')
@click.argument('pizza_name', nargs=1)
def order(pizza_name: str, size: str, delivery: bool):
    """
    –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ –ø–∏—Ü—Ü—É.

    Args:
        pizza_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∏—Ü—Ü—ã.
        size (str): –†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã ('L' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).
        delivery (bool): –§–ª–∞–≥ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏.

    """
    if pizza_name not in ['margherita', 'pepperoni', 'hawaiian']:
        print('–ù–µ—Ç –≤ –º–µ–Ω—é')
        return
    
    pizza = None
    if pizza_name == 'margherita':
        pizza = Margherita(size)
    elif pizza_name == 'pepperoni':
        pizza = Pepperoni(size)
    elif pizza_name == 'hawaiian':
        pizza = Hawaiian(size)


    pizza.cook()

    if delivery:
        pizza.deliver()


@cli.command()
def menu():
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é.

    """
    margherita = Margherita()
    pepperoni = Pepperoni()
    hawaiian = Hawaiian()

    print('üßÄ' + margherita.show_ingredients())
    print('üçÖ' + pepperoni.show_ingredients())
    print('üçç' + hawaiian.show_ingredients())


if __name__ == '__main__':
    cli()
